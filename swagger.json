{
    "openapi": "3.0.0",
    "info": {
        "title": "Remedial Binar Docs",
        "version": "1.0"
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api-key",
            "in": "header"
        }
    },
    "servers": [
        {
            "url": "http://localhost:8889",
            "description": "Development server"
        },
        {
            "url": "http://34.128.104.172:8889",
            "description": "Tweetion server"
        }
    ],
    "tags": [
        {
            "name": "user",
            "description": "All routes about user endpoints"
        },
        {
            "name": "tweet",
            "description": "All routes about tweet endpoints"
        }
    ],
    "paths": {
        "/api/user": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "find all user",
                "description": "returns all user data details",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "There is no user yet"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "patch": {
                "tags": [
                    "user"
                ],
                "summary": "update user details by id",
                "description": "require a **header token** and only can be done with **user role**",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "fields that need to be filled in",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateFields"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserUpdate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "There is no user with ID {id} Unauthorized to make changes"
                    },
                    "401": {
                        "description": "Unauthorized to make changes"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "delete user by id",
                "description": "require a **header token** and only can be done with **user role**",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has been deleted"
                    },
                    "400": {
                        "description": "There is no user with ID {id}"
                    },
                    "401": {
                        "description": "Unauthorized to make changes"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/user/verify?token={token}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "verify user",
                "description": "verify user with the link sent to the email",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verified and confirmed"
                    },
                    "500": {
                        "description": "Invalid Token / Internal server error"
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "create new user",
                "description": "",
                "requestBody": {
                    "description": "fields that need to be filled in",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegisterFields"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRegister"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input / Email is already registered"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "logs user into the system",
                "description": "",
                "requestBody": {
                    "description": "fields that need to be filled in",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLoginFields"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "type": "object",
                                "example": {
                                    "data": "token"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Email is not registered yet / Password invalid"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/update-avatar": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "insert a photo",
                "description": "require a **header token** and only can be done with **user role**",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "upload image file with format .jpg or .png",
                    "required": true,
                    "content": {
                        "image/*": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "type": "object",
                                "example": {
                                    "data": "Success update avatar"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token / Unauthenticated / Please verify your email first"
                    },
                    "401": {
                        "description": "Unauthorized to make changes"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/profile": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "verify user",
                "description": "verify user with the link sent to the email",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verified and confirmed"
                    },
                    "500": {
                        "description": "Invalid Token / Internal server error"
                    }
                }
            }
        },
        "/api/send-verif": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "verify user",
                "description": "verify user with the link sent to the email",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verified and confirmed"
                    },
                    "500": {
                        "description": "Invalid Token / Internal server error"
                    }
                }
            }
        },
        "/api/active-user/{id}": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "verify user",
                "description": "verify user with the link sent to the email",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verified and confirmed"
                    },
                    "500": {
                        "description": "Invalid Token / Internal server error"
                    }
                }
            }
        },
        "/api/disable-user/{id}": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "verify user",
                "description": "verify user with the link sent to the email",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verified and confirmed"
                    },
                    "500": {
                        "description": "Invalid Token / Internal server error"
                    }
                }
            }
        },
        "/api/tweet": {
            "get": {
                "tags": [
                    "tweet"
                ],
                "summary": "find all tweet with pagination",
                "description": "returns all tweet data details",
                "parameters": [
                    {
                        "in": "path",
                        "name": "page",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "limit",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TweetGet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "There is no tweet yet"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "tags": [
                    "tweet"
                ],
                "summary": "create new tweet max lenght 160",
                "description": "require a **header token**",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "admin token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "fields that need to be filled in",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TweetCreateFields"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TweetCreate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/tweet/{id}": {
            "delete": {
                "tags": [
                    "tweet"
                ],
                "summary": "delete tweet by id",
                "description": "require a **header token** ",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tweet has been deleted"
                    },
                    "400": {
                        "description": "There is no user with ID {id}"
                    },
                    "401": {
                        "description": "Unauthorized to make changes"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "get": {
                "tags": [
                    "tweet"
                ],
                "summary": "get tweet by id",
                "description": "require a **header token** ",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tweet has been show"
                    },
                    "400": {
                        "description": "There is no user with ID {id}"
                    },
                    "401": {
                        "description": "Unauthorized "
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "patch": {
                "tags": [
                    "tweet"
                ],
                "summary": "edit tweet by id",
                "description": "require a **header token** and only can be done with **user role**",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "user token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "fields that need to be filled in",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TweetUpdateFields"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "tweet has been updated"
                    },
                    "400": {
                        "description": "There is no user with ID {id}"
                    },
                    "401": {
                        "description": "Unauthorized to make changes"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "UserGet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "expected value is a URL"
                    },
                    "role": {
                        "type": "string",
                        "description": "value must be 'user/admin'"
                    },
                    "confirmed": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "date-time"
                    },
                    "updatedAt": {
                        "type": "date-time"
                    }
                },
                "example": [
                    {
                        "id": "1",
                        "name": "admin",
                        "email": "admin@gmail.com",
                        "password": "$23$10$DS4QCrAT7IDrUnrapZjtCemdB8W6VT0fP3EXR9glgNR9jegIazd/.",
                        "street": "Jl. Mawar",
                        "city": "Jakarta",
                        "avatar": "URL",
                        "role": "admin",
                        "confirmed": true,
                        "createdAt": "2023-04-05T08:36:26.350Z",
                        "updatedAt": "2023-04-05T08:36:26.350Z"
                    },
                    {
                        "id": "2",
                        "name": "user",
                        "email": "customer@gmail.com",
                        "password": "$23$10$DS4QCrAT7IDrUnrapZjtCemdB8W6VT0fP3EXR9glgNR9jegIazd/.",
                        "street": "Jl. Mawar",
                        "city": "Bengkulu",
                        "avatar": null,
                        "role": "user",
                        "confirmed": true,
                        "createdAt": "2023-04-05T08:36:26.350Z",
                        "updatedAt": "2023-04-05T08:36:26.350Z"
                    }
                ]
            },
            "UserRegisterFields": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "expected value is a URL"
                    },
                    "role": {
                        "type": "string",
                        "description": "value must be 'user/admin'"
                    }
                }
            },
            "UserRegister": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "expected value is a URL"
                    },
                    "role": {
                        "type": "string",
                        "description": "value must be 'user/admin'"
                    },
                    "confirmed": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "date-time"
                    },
                    "updatedAt": {
                        "type": "date-time"
                    }
                },
                "example": {
                    "id": "1",
                    "name": "user",
                    "email": "admin@gmail.com",
                    "password": "$23$10$DS4QCrAT7IDrUnrapZjtCemdB8W6VT0fP3EXR9glgNR9jegIazd/.",
                    "street": "Jl. Mawar",
                    "city": "Jakarta",
                    "avatar": null,
                    "role": "user",
                    "confirmed": false,
                    "createdAt": "2023-04-05T08:36:26.350Z",
                    "updatedAt": "2023-04-05T08:36:26.350Z"
                }
            },
            "UserLoginFields": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "UserUpdateFields": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    }
                }
            },
            "UserUpdate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "expected value is a URL"
                    },
                    "role": {
                        "type": "string",
                        "description": "value must be 'user/admin'"
                    },
                    "confirmed": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "date-time"
                    },
                    "updatedAt": {
                        "type": "date-time"
                    }
                },
                "example": {
                    "id": "1",
                    "name": "admin",
                    "email": "admin@gmail.com",
                    "password": "$23$10$DS4QCrAT7IDrUnrapZjtCemdB8W6VT0fP3EXR9glgNR9jegIazd/.",
                    "street": "Jl. Mawar",
                    "city": "Jakarta",
                    "avatar": "URL",
                    "role": "admin",
                    "confirmed": false,
                    "createdAt": "2023-04-05T08:36:26.350Z",
                    "updatedAt": "2023-04-05T08:36:26.350Z"
                }
            },
            "TweetGet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "userID": {
                        "type": "integer"
                    },
                    "tweet": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "date-time"
                    },
                    "updatedAt": {
                        "type": "date-time"
                    }
                },
                "example": [
                    {
                        "id": "1",
                        "userID": "1",
                        "tweet": "Oreo 20gr",
                        "createdAt": "2023-04-05T08:36:26.350Z",
                        "updatedAt": "2023-04-05T08:36:26.350Z"
                    },
                    {
                        "id": "2",
                        "userID": "1",
                        "tweet": "Pocari Sweat 300ml",
                        "createdAt": "2023-04-05T08:36:26.350Z",
                        "updatedAt": "2023-04-05T08:36:26.350Z"
                    }
                ]
            },
            "TweetCreateFields": {
                "type": "object",
                "properties": {
                    "tweet": {
                        "type": "string"
                    }
                }
            },
            "TweetCreate": {
                "type": "object",
                "properties": {
                    "userID": {
                        "type": "integer"
                    },
                    "tweet": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "date-time"
                    },
                    "updatedAt": {
                        "type": "date-time"
                    }
                },
                "example": {
                    "userID": "1",
                    "tweet": "Oreo 20gr",
                    "createdAt": "2023-04-05T08:36:26.350Z",
                    "updatedAt": "2023-04-05T08:36:26.350Z"
                }
            },
            "TweetUpdateFields": {
                "type": "object",
                "properties": {
                    "tweet": {
                        "type": "string"
                    }
                }
            },
            "TweetUpdate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "userID": {
                        "type": "integer"
                    },
                    "tweet": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "date-time"
                    },
                    "updatedAt": {
                        "type": "date-time"
                    }
                },
                "example": {
                    "id": "1",
                    "userID": "1",
                    "tweet": "Oreo 20gr",
                    "createdAt": "2023-04-05T08:36:26.350Z",
                    "updatedAt": "2023-04-05T08:36:26.350Z"
                }
            }
        }
    }
}